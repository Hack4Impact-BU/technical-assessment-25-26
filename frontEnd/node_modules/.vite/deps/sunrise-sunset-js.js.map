{
  "version": 3,
  "sources": ["../../sunrise-sunset-js/dist/index.js"],
  "sourcesContent": ["'use strict';\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\n/**\n * Sunrise/sunset script. By Matt Kane. Adopted for NPM use by Alexey Udivankin.\n *\n * Based loosely and indirectly on Kevin Boone's SunTimes Java implementation\n * of the US Naval Observatory's algorithm.\n *\n * Copyright Â© 2012 Triggertrap Ltd. All rights reserved.\n *\n * This library is free software; you can redistribute it and/or modify it under the terms of the GNU Lesser General\n * Public License as published by the Free Software Foundation; either version 2.1 of the License, or (at your option)\n * any later version.\n *\n * This library is distributed in the hope that it will be useful,but WITHOUT ANY WARRANTY; without even the implied\n * warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public License for more\n * details.\n * You should have received a copy of the GNU Lesser General Public License along with this library; if not, write to\n * the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA,\n * or connect to: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html\n */\n/**\n * Default zenith\n */\nconst DEFAULT_ZENITH = 90.8333;\n/**\n * Degrees per hour\n */\nconst DEGREES_PER_HOUR = 360 / 24;\n/**\n * Msec in hour\n */\nconst MSEC_IN_HOUR = 60 * 60 * 1000;\n/**\n * Get day of year\n */\nfunction getDayOfYear(date) {\n    return Math.ceil((date.getTime() - new Date(date.getFullYear(), 0, 1).getTime()) / 8.64e7);\n}\n/**\n * Get sin of value in deg\n */\nfunction sinDeg(deg) {\n    return Math.sin(deg * 2.0 * Math.PI / 360.0);\n}\n/**\n * Get acos of value in deg\n */\nfunction acosDeg(x) {\n    return Math.acos(x) * 360.0 / (2 * Math.PI);\n}\n/**\n * Get asin of value in deg\n */\nfunction asinDeg(x) {\n    return Math.asin(x) * 360.0 / (2 * Math.PI);\n}\n/**\n * Get tan of value in deg\n */\nfunction tanDeg(deg) {\n    return Math.tan(deg * 2.0 * Math.PI / 360.0);\n}\n/**\n * Get cos of value in deg\n */\nfunction cosDeg(deg) {\n    return Math.cos(deg * 2.0 * Math.PI / 360.0);\n}\n/**\n * Get ramainder\n */\nfunction mod(a, b) {\n    const result = a % b;\n    return result < 0\n        ? result + b\n        : result;\n}\n/**\n * Calculate Date for either sunrise or sunset\n */\nfunction calculate(latitude, longitude, isSunrise, zenith, date) {\n    const dayOfYear = getDayOfYear(date);\n    const hoursFromMeridian = longitude / DEGREES_PER_HOUR;\n    const approxTimeOfEventInDays = isSunrise\n        ? dayOfYear + ((6 - hoursFromMeridian) / 24)\n        : dayOfYear + ((18.0 - hoursFromMeridian) / 24);\n    const sunMeanAnomaly = (0.9856 * approxTimeOfEventInDays) - 3.289;\n    const sunTrueLongitude = mod(sunMeanAnomaly + (1.916 * sinDeg(sunMeanAnomaly)) + (0.020 * sinDeg(2 * sunMeanAnomaly)) + 282.634, 360);\n    const ascension = 0.91764 * tanDeg(sunTrueLongitude);\n    let rightAscension;\n    rightAscension = 360 / (2 * Math.PI) * Math.atan(ascension);\n    rightAscension = mod(rightAscension, 360);\n    const lQuadrant = Math.floor(sunTrueLongitude / 90) * 90;\n    const raQuadrant = Math.floor(rightAscension / 90) * 90;\n    rightAscension = rightAscension + (lQuadrant - raQuadrant);\n    rightAscension /= DEGREES_PER_HOUR;\n    const sinDec = 0.39782 * sinDeg(sunTrueLongitude);\n    const cosDec = cosDeg(asinDeg(sinDec));\n    const cosLocalHourAngle = ((cosDeg(zenith)) - (sinDec * (sinDeg(latitude)))) / (cosDec * (cosDeg(latitude)));\n    const localHourAngle = isSunrise\n        ? 360 - acosDeg(cosLocalHourAngle)\n        : acosDeg(cosLocalHourAngle);\n    const localHour = localHourAngle / DEGREES_PER_HOUR;\n    const localMeanTime = localHour + rightAscension - (0.06571 * approxTimeOfEventInDays) - 6.622;\n    const time = mod(localMeanTime - (longitude / DEGREES_PER_HOUR), 24);\n    const utcMidnight = Date.UTC(date.getFullYear(), date.getMonth(), date.getDate());\n    // Created date will be set to local (system) time zone.\n    return new Date(utcMidnight + (time * MSEC_IN_HOUR));\n}\n/**\n * Calculate Sunrise time for given longitude, latitude, zenith and date\n */\nfunction getSunrise(latitude, longitude, date = new Date()) {\n    return calculate(latitude, longitude, true, DEFAULT_ZENITH, date);\n}\n/**\n * Calculate Sunset time for given longitude, latitude, zenith and date\n */\nfunction getSunset(latitude, longitude, date = new Date()) {\n    return calculate(latitude, longitude, false, DEFAULT_ZENITH, date);\n}\n\nexports.getSunrise = getSunrise;\nexports.getSunset = getSunset;\n"],
  "mappings": ";;;;;AAAA;AAAA;AAEA,WAAO,eAAe,SAAS,cAAc,EAAE,OAAO,KAAK,CAAC;AAwB5D,QAAM,iBAAiB;AAIvB,QAAM,mBAAmB,MAAM;AAI/B,QAAM,eAAe,KAAK,KAAK;AAI/B,aAAS,aAAa,MAAM;AACxB,aAAO,KAAK,MAAM,KAAK,QAAQ,IAAI,IAAI,KAAK,KAAK,YAAY,GAAG,GAAG,CAAC,EAAE,QAAQ,KAAK,KAAM;AAAA,IAC7F;AAIA,aAAS,OAAO,KAAK;AACjB,aAAO,KAAK,IAAI,MAAM,IAAM,KAAK,KAAK,GAAK;AAAA,IAC/C;AAIA,aAAS,QAAQ,GAAG;AAChB,aAAO,KAAK,KAAK,CAAC,IAAI,OAAS,IAAI,KAAK;AAAA,IAC5C;AAIA,aAAS,QAAQ,GAAG;AAChB,aAAO,KAAK,KAAK,CAAC,IAAI,OAAS,IAAI,KAAK;AAAA,IAC5C;AAIA,aAAS,OAAO,KAAK;AACjB,aAAO,KAAK,IAAI,MAAM,IAAM,KAAK,KAAK,GAAK;AAAA,IAC/C;AAIA,aAAS,OAAO,KAAK;AACjB,aAAO,KAAK,IAAI,MAAM,IAAM,KAAK,KAAK,GAAK;AAAA,IAC/C;AAIA,aAAS,IAAI,GAAG,GAAG;AACf,YAAM,SAAS,IAAI;AACnB,aAAO,SAAS,IACV,SAAS,IACT;AAAA,IACV;AAIA,aAAS,UAAU,UAAU,WAAW,WAAW,QAAQ,MAAM;AAC7D,YAAM,YAAY,aAAa,IAAI;AACnC,YAAM,oBAAoB,YAAY;AACtC,YAAM,0BAA0B,YAC1B,aAAc,IAAI,qBAAqB,KACvC,aAAc,KAAO,qBAAqB;AAChD,YAAM,iBAAkB,SAAS,0BAA2B;AAC5D,YAAM,mBAAmB,IAAI,iBAAkB,QAAQ,OAAO,cAAc,IAAM,OAAQ,OAAO,IAAI,cAAc,IAAK,SAAS,GAAG;AACpI,YAAM,YAAY,UAAU,OAAO,gBAAgB;AACnD,UAAI;AACJ,uBAAiB,OAAO,IAAI,KAAK,MAAM,KAAK,KAAK,SAAS;AAC1D,uBAAiB,IAAI,gBAAgB,GAAG;AACxC,YAAM,YAAY,KAAK,MAAM,mBAAmB,EAAE,IAAI;AACtD,YAAM,aAAa,KAAK,MAAM,iBAAiB,EAAE,IAAI;AACrD,uBAAiB,kBAAkB,YAAY;AAC/C,wBAAkB;AAClB,YAAM,SAAS,UAAU,OAAO,gBAAgB;AAChD,YAAM,SAAS,OAAO,QAAQ,MAAM,CAAC;AACrC,YAAM,qBAAsB,OAAO,MAAM,IAAM,SAAU,OAAO,QAAQ,MAAQ,SAAU,OAAO,QAAQ;AACzG,YAAM,iBAAiB,YACjB,MAAM,QAAQ,iBAAiB,IAC/B,QAAQ,iBAAiB;AAC/B,YAAM,YAAY,iBAAiB;AACnC,YAAM,gBAAgB,YAAY,iBAAkB,UAAU,0BAA2B;AACzF,YAAM,OAAO,IAAI,gBAAiB,YAAY,kBAAmB,EAAE;AACnE,YAAM,cAAc,KAAK,IAAI,KAAK,YAAY,GAAG,KAAK,SAAS,GAAG,KAAK,QAAQ,CAAC;AAEhF,aAAO,IAAI,KAAK,cAAe,OAAO,YAAa;AAAA,IACvD;AAIA,aAAS,WAAW,UAAU,WAAW,OAAO,oBAAI,KAAK,GAAG;AACxD,aAAO,UAAU,UAAU,WAAW,MAAM,gBAAgB,IAAI;AAAA,IACpE;AAIA,aAAS,UAAU,UAAU,WAAW,OAAO,oBAAI,KAAK,GAAG;AACvD,aAAO,UAAU,UAAU,WAAW,OAAO,gBAAgB,IAAI;AAAA,IACrE;AAEA,YAAQ,aAAa;AACrB,YAAQ,YAAY;AAAA;AAAA;",
  "names": []
}
